package com.github.dakusui.jcunit.framework;

import com.github.dakusui.jcunit.core.tuples.Tuple;
import com.github.dakusui.jcunit.core.tuples.TupleUtils;
import com.github.dakusui.jcunit.core.utils.Checks;

import java.io.Serializable;

/**
 * A class that represents a test case.
 */
public class TestCase implements Serializable {
  private final Type    type;
  private final Tuple   tuple;

  /**
   * Creates an object of this class.
   */
  protected TestCase(Type type, Tuple tuple) {
    this.type = Checks.checknotnull(type);
    this.tuple = Checks.checknotnull(tuple);
  }

  /**
   * Returns a type of this object, which represents how this object is generated.
   *
   * @see Type
   */
  public Type getType() {
    return type;
  }

  /**
   * Returns a tuple that specifies what value should be used for each factor in this test case.
   * Users can use a returned value {@code Tuple} simply as a {@code Map<String, Object>} whose keys
   * are factor names and values are corresponding levels.
   *
   * @see java.util.Map
   */
  public Tuple getTuple() {
    return TupleUtils.unmodifiableTuple(tuple);
  }

  /**
   * A type to categorize test cases based on how it is generated.
   */
  public enum Type {
    /**
     * A custom test case, which is returned by a method annotated with {@literal @}{@code CustomTestCases}.
     */
    CUSTOM,
    /**
     * A generated test case. A test case generated by JCUnit framework through an implementation of {@code CoveringArrayEngine}
     * belongs to this category.
     *
     * In case explicit constraint checker is present, generated test cases do not violate constraints
     * defined by the checker.
     */
    REGULAR,
    /**
     * Test cases returned by {@code ConstraintManager#getViolations()} belongs to this.
     * Typically, a test case which violates some defined constraint belongs to this category.
     */
    VIOLATION
  }
}
