package com.github.dakusui.jcunit.plugins.caengines;

import com.github.dakusui.jcunit.core.Checks;
import com.github.dakusui.jcunit.core.factor.Factors;
import com.github.dakusui.jcunit.core.tuples.Tuple;
import com.github.dakusui.jcunit.plugins.Plugin;
import com.github.dakusui.jcunit.plugins.constraints.Constraint;
import com.github.dakusui.jcunit.plugins.reporters.CoverageReporter;

import java.util.List;

import static com.github.dakusui.jcunit.core.Checks.checkcond;
import static com.github.dakusui.jcunit.core.Checks.checknotnull;

/**
 * An abstract base class that provides a basic implementation of {@code CAEngine}.
 * Users can create a new tuple generator by extending this class.
 */
public abstract class CoveringArrayEngineBase
    implements CoveringArrayEngine, Plugin {

  private Factors factors = null;
  private Constraint       constraint;
  private CoverageReporter coverageReporter = new CoverageReporter.Default();
  private CoveringArray coveringArray;

  public CoveringArrayEngineBase() {
  }

  final public void init() {
    checkcond(factors != null, "Factors must be set in advance");
    checkcond(constraint != null, "Constraint must be set in advance");
    checkcond(coverageReporter != null, "Coverage reporter must be set in advance");
    this.coveringArray = createCoveringArray(generate());
  }

  /**
   * {@inheritDoc}
   */
  @Override
  final public void setFactors(Factors factors) {
    this.factors = checknotnull(factors);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  final public Factors getFactors() {
    return this.factors;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  final public void setConstraint(Constraint constraint) {
    this.constraint = checknotnull(constraint);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Constraint getConstraint() {
    return this.constraint;
  }

  @Override
  public CoverageReporter getCoverageReporter() {
    return this.coverageReporter;
  }

  @Override
  public void setCoverageReporter(CoverageReporter coverageReporter) {
    this.coverageReporter = Checks.checknotnull(coverageReporter);
  }

  @Override
  public CoveringArray getCoveringArray() {
    checkcond(
        this.coveringArray != null,
        "'generate' method should be called before this method is invoked.");
    return this.coveringArray;
  }

  /**
   * Implementation of this method must return a list of tuples (test cases)
   * generated by this object.
   * <p/>

   */
  abstract protected List<Tuple> generate();

  protected CoveringArray createCoveringArray(List<Tuple> testCase) {
    return new CoveringArray.Base(testCase);
  }

}


