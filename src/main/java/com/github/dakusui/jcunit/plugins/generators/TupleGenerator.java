package com.github.dakusui.jcunit.plugins.generators;

/**
 */

import com.github.dakusui.jcunit.core.Checks;
import com.github.dakusui.jcunit.core.factor.Factors;
import com.github.dakusui.jcunit.core.tuples.Tuple;
import com.github.dakusui.jcunit.plugins.Plugin;
import com.github.dakusui.jcunit.plugins.constraintmanagers.ConstraintManager;

/**
 * Implementations of this interface must guarantee that a public constructor without
 * any parameters exists.
 */
public interface TupleGenerator extends
    Plugin,
    Iterable<Tuple> {
  void init();

  Factors getFactors();

  void setFactors(Factors factors);

  ConstraintManager getConstraintManager();

  void setConstraintManager(ConstraintManager constraintManager);

  Class<?> getTargetClass();

  void setTargetClass(Class<?> klazz);

  /**
   * Returns a tuple which represents a test case identified by {@code testId}
   */
  Tuple get(long testId);

  /**
   * Returns next valid id.
   */
  long nextId(long testId);

  /**
   * Returns the first valid id.
   */
  long firstId();

  /**
   * Returns total number of test cases generated by the implementations of this interface.
   */
  long size();

  /**
   * A class to build a tuple generator.
   *
   * @param <S> data source type. Can be {@literal @}Param, {@code String}, etc.
   */
  class Builder<S> {

    private final Param.Resolver<S>               resolver;
    private       Class<? extends TupleGenerator> tupleGeneratorClass;
    private       Factors                         factors;
    private       ConstraintManager               constraintManager;
    private       S[]                             parameters;
    private       Class<?>                        targetClass;

    public static Builder<Object> createSimpleBuilder(Object... arguments) {
      return createSimpleBuilder(IPO2TupleGenerator.class, arguments);
    }

    public static Builder<Object> createSimpleBuilder(Class<? extends TupleGenerator> tupleGeneratorClass, Object... arguments) {
      return new Builder<Object>(
          Param.Resolver.NULL,
          tupleGeneratorClass,
          arguments,
          ConstraintManager.DEFAULT_CONSTRAINT_MANAGER
      );
    }

    public Builder(Param.Resolver<S> resolver, S... arguments) {
      this(resolver, IPO2TupleGenerator.class, arguments, ConstraintManager.DEFAULT_CONSTRAINT_MANAGER);
    }

    public Builder(
        Param.Resolver<S> resolver,
        Class<? extends TupleGenerator> tupleGeneratorClass,
        S[] argumentsForTupleGenerator,
        ConstraintManager cm
    ) {
      this.resolver = Checks.checknotnull(resolver);
      this.tupleGeneratorClass = Checks.checknotnull(tupleGeneratorClass);
      this.constraintManager = Checks.checknotnull(cm);
      this.parameters = argumentsForTupleGenerator;
    }

    public Builder(TupleGenerator.Builder<S> base) {
      this.resolver = Checks.checknotnull(base.resolver);
      this.tupleGeneratorClass = Checks.checknotnull(base.tupleGeneratorClass);
      this.factors = Checks.checknotnull(base.factors);
      this.constraintManager = Checks.checknotnull(base.getConstraintManager());
      this.parameters = Checks.checknotnull(base.parameters);
    }

    public Builder setTupleGeneratorClass(
        Class<? extends TupleGenerator> tupleGeneratorClass) {
      this.tupleGeneratorClass = tupleGeneratorClass;
      return this;
    }

    public Builder setFactors(Factors factors) {
      this.factors = factors;
      return this;
    }

    public Builder setConstraintManager(ConstraintManager constraintManager) {
      this.constraintManager = constraintManager;
      return this;
    }

    public Builder setParameters(S[] parameters) {
      this.parameters = parameters;
      return this;
    }

    public Builder setTargetClass(Class<?> targetClass) {
      this.targetClass = targetClass;
      return this;
    }

    public TupleGenerator build() {
      Checks.checknotnull(this.constraintManager);
      Checks.checknotnull(this.tupleGeneratorClass);
      Checks.checknotnull(this.factors);
      Checks.checknotnull(this.constraintManager);
      Plugin.Factory<TupleGenerator, S> factory = new Factory<TupleGenerator, S>(
          (Class<TupleGenerator>) this.tupleGeneratorClass,
          this.resolver
      );
      TupleGenerator ret = factory.create(this.parameters);
      ret.setFactors(this.factors);
      ret.setConstraintManager(this.constraintManager);
      ret.setTargetClass(this.targetClass);
      ret.init();
      return ret;
    }

    public ConstraintManager getConstraintManager() {
      return constraintManager;
    }

    public Factors getFactors() {
      return factors;
    }
  }
}
