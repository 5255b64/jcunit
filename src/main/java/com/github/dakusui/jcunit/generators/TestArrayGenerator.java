package com.github.dakusui.jcunit.generators;

import com.github.dakusui.jcunit.core.GeneratorParameters;

import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Implementations of this interface must guarantee that a public constructor without
 * any parameters exists.
 *
 * @param <T> Type of keys
 */
public interface TestArrayGenerator<T> extends Iterator<Map<T, Object>>,
		Iterable<Map<T, Object>> {

	/**
	 * <code>null</code> will be returned if undefined key is specified.
	 */
	public Object[] getDomain(T key);

	/**
	 * Initializes this object.
	 * Users of the implementations of this interface must call this method
	 * after this class is instantiated.
	 *
	 * Until this method is called, behaviors of any other methods are not predictable.
	 */
	public void init(GeneratorParameters.Value[] params,
	                 LinkedHashMap<T, Object[]> domains);

	/**
	 * Returns an index of the value for {@code key} in <code>testId</code>.
	 * <p/>
	 * Using the returned value of this method, JCUnit determines which value in {@code key}'s
	 * domain should be used for the test run {@code testId}.
	 * {@code testId} is a long integer which is in {@code [0, s)}, where {@code s} is
	 * the value returned by {@code size} method.
	 * <p/>
	 * The implementation of this method must return an integer in the range of {@code [0, t)},
	 * where t is the returned value of {@code getDomain(key).size()}.
	 *
	 * @param key    A key which identifies a parameters used by this object.
	 * @param testId A long integer which identifies a test case generated by this object.
	 * @return
	 */
	public int getIndex(T key, long testId);

	public List<T> getKeys();

	public Map<T, Object> get(long cur);


	/**
	 * Returns total number of test cases generated by the implementations of this interface.
	 */
	public long size();
}
