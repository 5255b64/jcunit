package com.github.dakusui.jcunit.generators;

/**
 */

import com.github.dakusui.jcunit.constraint.ConstraintManager;
import com.github.dakusui.jcunit.core.JCUnitConfigurablePlugin;
import com.github.dakusui.jcunit.core.Utils;
import com.github.dakusui.jcunit.core.factor.Factor;
import com.github.dakusui.jcunit.core.factor.Factors;
import com.github.dakusui.jcunit.core.tuples.Tuple;

import java.util.Iterator;

/**
 * Implementations of this interface must guarantee that a public constructor without
 * any parameters exists.
 */
public interface TupleGenerator extends
    JCUnitConfigurablePlugin, Iterator<Tuple>,
    Iterable<Tuple> {

  public Factors getFactors();

  public void setFactors(Factors factors);

  public ConstraintManager getConstraintManager();

  public void setConstraintManager(ConstraintManager constraintManager);

  public Class<?> getTargetClass();

  public void setTargetClass(Class<?> klazz);

  /**
   * Returns a tuple which represents a test case identified by {@code testId}
   */
  public Tuple get(long testId);

  /**
   * Returns next valid id.
   */
  public long nextId(long testId);

  /**
   * Returns the first valid id.
   */
  public long firstId();

  /**
   * Returns total number of test cases generated by the implementations of this interface.
   */
  public long size();

  public static class Builder {

    private Class<? extends TupleGenerator> tupleGeneratorClass;
    private Factors                         factors;
    private ConstraintManager               constraintManager;
    private Object[]                        parameters;

    public Builder setTupleGeneratorClass(Class<? extends TupleGenerator> tupleGeneratorClass) {
      this.tupleGeneratorClass = tupleGeneratorClass;
      return this;
    }

    public Builder setFactors(Factors factors) {
      this.factors = factors;
      return this;
    }

    public Builder setConstraintManager(ConstraintManager constraintManager) {
      this.constraintManager = constraintManager;
      return this;
    }

    public Builder setParameters(Object[] parameters) {
      this.parameters = parameters;
      return this;
    }

    public TupleGenerator build() {
      TupleGenerator ret = Utils.createNewInstanceUsingNoParameterConstructor(this.tupleGeneratorClass);
      ret.setFactors(this.factors);
      ret.setConstraintManager(this.constraintManager);
      ret.init(this.parameters);
      return ret;
    }

  }
}
