{"name":"JCUnit","tagline":"A combinatorial testing framework on top of JUnit. It makes your refactoring life lot easier.","body":"# jcunit\r\nJCUnit is a framework to perform combinatorial testing framework using 'pairwise' technique.\r\n\r\n# First test with JCUnit\r\nBelow is jcunit's most basic example 'Calc.java'. Gist is also available at https://gist.github.com/dakusui/8980728\r\nJust by running CalcTest.java as a usual JUnit test, JCUnit will automatically generate test cases based on '@In' annotations, and will store the output of Calc based on '@Out' annotation at the first time. \r\nFrom then on, in other words from the second run, you will be able to verify if Calc#calc's output is unchanged just by running CalcTest as a JUnit test.\r\n\r\nAnd the values of '@Out' annotated fields are stored in '.jcunit/' under current directory you can remove it when you want to record new values of your SUT.\r\n\r\n## Calc.java example\r\n### Calc.java (Main class, SUT)\r\nCalc is the SUT (Software under test) in this example.\r\nThe class provides a function to perform a calculation based on given two numbers and returns the result.\r\n\r\n```\r\npackage com.github.dakusui.jcunit.tutorial.session01;\r\n \r\npublic class Calc {\r\n\tpublic int calc(int a, int b) {\r\n\t\treturn a + b;\r\n\t}\r\n}\r\n```\r\n\r\n### CalcTest.java (Test)\r\nCalcTest is a test class for Calc class. '@Rule' and '@ClassRule' in this example is kind of boilerplate.\r\n\r\n```\r\npackage com.github.dakusui.jcunit.tutorial.session01;\r\n \r\nimport org.junit.ClassRule;\r\nimport org.junit.Rule;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\n \r\nimport com.github.dakusui.jcunit.core.BasicSummarizer;\r\nimport com.github.dakusui.jcunit.core.DefaultRuleSetBuilder;\r\nimport com.github.dakusui.jcunit.core.In;\r\nimport com.github.dakusui.jcunit.core.JCUnit;\r\nimport com.github.dakusui.jcunit.core.Out;\r\nimport com.github.dakusui.jcunit.core.RuleSet;\r\nimport com.github.dakusui.jcunit.core.Summarizer;\r\n \r\n@RunWith(JCUnit.class)\r\npublic class CalcTest {\r\n\t@In\r\n\tpublic int a;\r\n\t@In\r\n\tpublic int b;\r\n\t@Out\r\n\tpublic int c;\r\n\t\r\n\t@Rule\r\n\tpublic RuleSet rules = new DefaultRuleSetBuilder().autoRuleSet(this).summarizer(summarizer);\r\n\t@ClassRule\r\n\tpublic static Summarizer summarizer = new BasicSummarizer();\r\n\t\r\n\t@Test\r\n\tpublic void test() {\r\n\t\tthis.c = new Calc().calc(this.a, this.b);\r\n\t}\r\n}\r\n```\r\n\r\n### Maven dependency\r\nBelow is a pom.xml fragment to describe jcunit's dependency.\r\n\r\n```\r\n    <dependency>\r\n      <groupId>com.github.dakusui</groupId>\r\n      <artifactId>jcunit</artifactId>\r\n      <version>0.1.4</version>\r\n    </dependency>\r\n```\r\n\r\n## Tip 1: Customizing domains of @In fields\r\nJCUnit creates combinations based on types. For example, if a memeber is annotated with '@In' and its type is int, jcunit will pick up values {0, -1, 100, -100, 2147483647, -2147483648, 1}.\r\nBut this set is just a default set and you can customize it by using 'domain' paramter of '@In' annotation and creating a static method whose name is the same as the input field name's.\r\nThe method mustn't have any parameters and its return value must be an array of the field's type.\r\n\r\nBelow is the example for this function.\r\n\r\n```\r\n\t@In(domain=Domain.Method)\r\n\tpublic int a;\r\n\t\r\n\tpublic static int[] a() {\r\n\t\treturn new int[]{0, 1, 2};\r\n\t}\r\n\t\r\n```\r\n\r\nThe values returned by the method will be picked up and assigned to the field 'a' by the framework one by one.\r\n\r\n## Tip 2: Doing pairwise tests or customizing coverage.\r\nAdd annotation '@Generator(PairwiseTestArrayGenerator.class)' to CalcTest.java\r\n\r\n```\r\n@RunWith(JCUnit.class)\r\n@Generator(PairwiseTestArrayGenerator.class)\r\npublic class CalcTest {\r\n```\r\n\r\nSince there are only two parameters in this test class now (members a and b only), the test will automatically be exhaustive.\r\n\r\nYou can also specify CartesianTestArrayGenerator, which does exhausitive combinatorial tests always and takes long (sometimes too long and not practical), or SimpleTestArrayGenerator, which is default and has less coverage than Pairwise.\r\n\r\n\r\n# Copyright and license #\r\n\r\nCopyright 2013 Hiroshi Ukai.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this work except in compliance with the License.\r\nYou may obtain a copy of the License in the LICENSE file, or at:\r\n\r\n  [http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}