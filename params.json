{"name":"JCUnit","tagline":"A combinatorial testing framework on top of JUnit + Model-based testing. It makes your testing life a lot easier.","body":"# JCUnit\r\nJCUnit is a framework to perform combinatorial tests using 'pairwise'(or more generally 't-wise') \r\ntechnique.\r\nAbout what combinatorial testings are, articles below are useful as a starting point.\r\n\r\n* [All-pairs testing](http://en.wikipedia.org/wiki/All-pairs_testing)\r\n* [Introduction to Combinatorial Testing](http://mse.isri.cmu.edu/software-engineering/documents/faculty-publications/miranda/kuhnintroductioncombinatorialtesting.pdf)\r\n\r\nVery roughly to say, it's a technique to generate test cases with good 'coverage' \r\nwithout making the number of test cases explode.\r\n\r\nSuppose that we have a software product that can be run on various platforms, under\r\nvarious application/web servers, with various DBMSs, etc. Probably, we can describe\r\nthis situation as following.\r\n\r\n|Factor            |Levels                                   |\r\n|:----------------:|:----------------------------------------|\r\n|Platform          |Linux, MacOSX, Windows                   |\r\n|Java              |JavaSE7, JavaSE8, OpenJDK7               |\r\n|Browser           |Safari, Firefox, Chrome, InternetExplorer|\r\n|DBMS              |PostgreSQL, MySQL, SQLServer             |\r\n|Application server|Jetty, Tomcat                            |\r\n|Web server        |Apache HTTP server, IIS                  |\r\n\r\nIn total 3 * 3 * 4 * 3 * 2 * 2 = 432 test cases will be necessary to cover all the\r\npossible patterns.\r\nIn this example, we only have 6 paramters (factors) in this domain, fortunately.\r\nBut in real life, engineers don't get surprised even if there are more than one\r\nhundred parameters in a system. In other words, the number of all the possible \r\npatterns explodes very quickly.\r\n\r\nBut if we give up to cover all the possible patterns, but try to cover all the possible\r\nvalue pairs, things might be a bit different.\r\nThat is, if we ensure to cover \"Linux + Jetty\", \"Jetty + Java SE8\", etc (all the value pairs),\r\n but we do not try to cover \"Linux + Jetty + Java SE8\", we can reduce the size of\r\n test suite dramatically.\r\n\r\nIf you run this example,\r\n\r\n* [ConfigExample](/src/main/java/com/github/dakusui/jcunit/examples/confg/ConfigExample.java)\r\n\r\nyou will notice that only 17 test cases can cover all possible value pairs.\r\n17 vs 432 sounds impressive, isn't it?\r\n\r\n# Changes\r\nAbout changes from previous versions, refer to [release notes](RELEASENOTES.md).\r\n\r\n# Installation\r\nJCUnit requires Java SE6 or later. \r\nIt is tested using ```JUnit``` (4.12) and ```mockito-core``` (1.9.5).\r\n\r\n## Maven coordinate\r\nFirst of all, you will need to link JCUnit to your project.\r\nBelow is a pom.xml fragment to describe jcunit's dependency.\r\nPlease add it to your project's pom.xml \r\n\r\n```xml\r\n\r\n    <dependency>\r\n      <groupId>com.github.dakusui</groupId>\r\n      <artifactId>jcunit</artifactId>\r\n      <version>0.5.5</version>\r\n    </dependency>\r\n    \r\n```\r\n\r\n\r\n## Building from source\r\nYou can build ```combinatoradix``` by getting the source code from github.\r\n\r\n```\r\n\r\n    $ git clone https://github.com/dakusui/jcunit.git\r\n    ...\r\n    $ cd combinatoradix\r\n    ...\r\n    $ mvn install\r\n    ...\r\n    $\r\n```\r\n\r\nYou will find a compiled jar file ```jcunit-{X.Y.Z}-SNAPSHOT.jar``` under\r\n ```target/``` directory. Place the file somewhere handy and include it in your classpath.\r\n \r\nTo use the jar file created by this procedure in a maven based project, include \r\nfollowing dependency in your pom.xml\r\n\r\n```xml\r\n\r\n    <dependency>\r\n      <groupId>com.github.dakusui</groupId>\r\n      <artifactId>jcunit</artifactId>\r\n      <version>0.5.6-SNAPSHOT</version>\r\n    </dependency>\r\n    \r\n```\r\n\r\n# First test with JCUnit\r\nBelow is JCUnit's most basic example 'QuadraticEquationSolver.java'.\r\nJust by running QuadraticEquationSolverTest.java as a usual JUnit test, JCUnit will \r\nautomatically generate test cases based on '@FactorField' annotations.\r\n\r\n## QuadraticEquationSolver program example\r\nTo understand JCUnit's functions, let's test 'QuadraticEquationSolver.java' program,\r\n which solves 'quadratic equations' using a formula.\r\nThe program contains some intentional bugs and unclear specifications (or behaviors).\r\nThe formula it uses is,\r\n\r\n```java\r\n\r\n    {x1, x2} = { (-b + Math.sqrt(b*b - 4*c*a)) / 2*a, (-b - Math.sqrt(b*b - 4*c*a)) / 2*a }\r\n\r\n```\r\n\r\nwhere {x1, x2} are the solutions of an equation, \r\n\r\n```java\r\n\r\n    a * x^2 + b * x + c = 0\r\n\r\n```\r\n\r\n### QuadraticEquationSolver.java (Main class, SUT)\r\n'QuadraticEquationSolver' is the SUT (Software under test) in this example.\r\nThe class provides a function to solve a quadratic equation using a quadratic\r\nformula and returns the solutions.\r\n\r\n```java\r\n\r\n    //QuadraticEquationSolver.java\r\n    public class QuadraticEquationSolver {\r\n      private final double a;\r\n      private final double b;\r\n      private final double c;\r\n    \r\n      public static class Solutions {\r\n        public final double x1;\r\n        public final double x2;\r\n    \r\n        public Solutions(double x1, double x2) {\r\n          this.x1 = x1;\r\n          this.x2 = x2;\r\n        }\r\n    \r\n        public String toString() {\r\n          return String.format(\"(%f,%f)\", x1, x2);\r\n        }\r\n      }\r\n    \r\n      public QuadraticEquationSolver(double a, double b, double c) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n      }\r\n    \r\n      public Solutions solve() {\r\n        return new Solutions(\r\n            (-b + Math.sqrt(b * b - 4 * c * a)) / (2 * a),\r\n            (-b - Math.sqrt(b * b - 4 * c * a)) / (2 * a)\r\n        );\r\n      }\r\n    }\r\n```\r\n\r\nDid you already notice the bugs that this program has?\r\n\r\n* It doesn't consider equations that do not have solutions in real.\r\n* If it's not a quadratic equation but a linear one, how should it behave?\r\n* Errors. How should it handle errors? To what extent error is acceptable?\r\n* Overflows. If b * b, 4 * c * a, etc become bigger than Double.MAX_VALUE (or \r\nsmaller than Double.MIN_VALUE), how should it handle them?\r\n* Shouldn't we set some limits for a, b, and c? Both to make errors small enough \r\nand prevent overflows from happening.\r\n* etc. (maybe)\r\n\r\nTry to find (and reproduce) these bugs using JCUnit and fix them.\r\n\r\n### QuadraticEquationSolverTest.java (Test)\r\nQuadraticEquationSolverTest1 is a test class for QuadraticEquationSolver class.\r\n\r\n```java\r\n\r\n    // QuadraticEquationSolverTest1.java\r\n    @RunWith(JCUnit.class)\r\n    public class QuadraticEquationSolverTest1 {\r\n        @FactorField\r\n        public int a;\r\n        @FactorField\r\n        public int b;\r\n        @FactorField\r\n        public int c;\r\n    \r\n        @Test\r\n        public void test() {\r\n            QuadraticEquationSolver.Solutions s = new QuadraticEquationSolver(a, b,\r\n                    c).solve();\r\n            assertEquals(0.0, a * s.x1 * s.x1 + b * s.x1 + c);\r\n            assertEquals(0.0, a * s.x2 * s.x2 + b * s.x2 + c);\r\n        }\r\n    }\r\n    \r\n```\r\n\r\nIf you run this test class, JCUnit generates about fifty test cases and run them.\r\nBy default, it generates the test cases by using 'all-pairs' technique.\r\n\r\n# Features, tips, and examples\r\n## FSM support feature\r\nFSM support of JCUnit (FSM/JCUnit) is a feature that allows you to model your \r\nsoftware as a finite state machine, and JCUnit generates and executes a test suite \r\nfor it.\r\nThe test suite generation can be done by JCUnit's tuple generators.\r\n\r\nThis is really fun feature. Please try. Documentation is found [here](/src/site/markdown/FSM.md).\r\n\r\n## Examples\r\n### Quadratic equation solver\r\n* **[session1](src/test/java/com/github/dakusui/jcunit/examples/quadraticequation/session1/QuadraticEquationSolverTest1.java)**:\r\n  Test initial version of quadratic equation solver.\r\n* **[session2](src/test/java/com/github/dakusui/jcunit/examples/quadraticequation/session2/QuadraticEquationSolverTest2.java)**:\r\n  Exclude invalid test cases, whose ```a``` is 0. Because they are not quadratic equations.\r\n  And allow tests to accept solutions which make the equation less than 0.01.\r\n* **[session3](src/test/java/com/github/dakusui/jcunit/examples/quadraticequation/session3/QuadraticEquationSolverTest3.java)**:\r\n  Exclude tests cases whose absolute values of ```a```, ```b```, and ```c``` because they\r\n  cause overflows.\r\n* **[session4](src/test/java/com/github/dakusui/jcunit/examples/quadraticequation/session4/QuadraticEquationSolverTest4.java)**:\r\n  The SUT, ```QuadraticEquationSolver``` is now enhanced to throw ```IllegalArgumentException``` when solutions become imaginary.\r\n  Tests need to be enhanced to handle this new behaviour, too. ```@When``` annotation will be introduced to switch test methods\r\n  to be executed.\r\n* **[session5](src/test/java/com/github/dakusui/jcunit/examples/quadraticequation/session5/QuadraticEquationSolverTest5.java)**: How to implement a constraint manager (part - 1). \r\n* **[session6](src/test/java/com/github/dakusui/jcunit/examples/quadraticequation/session6/QuadraticEquationSolverTest6.java)**: How to implement a constraint manager (part - 2). Defining negative tests.\r\n\r\n### Reusing generated test suite\r\nGenerally speaking, pairwise test suite generation is a time consuming process.\r\nProbably a user wants to reuse a generated test suite later.\r\n \r\nA mechanism JCUnit has for this purpose is ```Recorder``` and ```Replayer```.\r\nAn example for them is found [here](src/test/java/com/github/dakusui/jcunit/examples/recorderreplayer/ReplayerExample.java).\r\n\r\n### Nested factors (grouping factors)\r\nLike [PICT][2], JCUnit is able to group factors and treat them as if one factor.\r\nAn example for this feature is found [here](src/test/java/com/github/dakusui/jcunit/examples/calc/NestedFieldExample.java).\r\n\r\n## Tips\r\nWhen you learn pairwise technique, probably you get excited that \"oh I can balance a \r\nsize of test cases and coverage by this! Nice! Its idea is intuitive and looks \r\nstraightforward. A test case is essentially attibutes and their values. Nice!\"\r\nBut when you start testing your software using the technique, you will come \r\nacross a lot of questions.\r\n\r\n* \"A test case that uses Internet Explorer on Linux platform doesn't make sense. But this test case contributes to cover Linux platform + Apache, Apache + PostgreSQL, etc, at the same time.\r\n* \"If expectations for test cases can be different depending on a test case's values, how can I define test methods?\"\r\n* etc.\r\n\r\nBest practices for problems you encounter might be found [here](/src/site/markdown/TIPS.md).\r\n\r\nAlso how you can customize how test cases should be generated, e.g., how to configure \r\npossible values for a certain parameter, in case you want to use non-primitive values \r\nwhat you can do, etc, can be found.\r\n\r\n\r\n# Refefences\r\n* [1] \"Pairwise Testing\", A website for pairwise technique\r\n* [2] \"PICT\", A most known powerful pairwise tool by microsoft, which is now open source.\r\n\r\n[1]: http://www.pairwise.org/\r\n[2]: https://github.com/microsoft/pict\r\n\r\n# Copyright and license #\r\n\r\nCopyright 2013 Hiroshi Ukai.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this work except in compliance with the License.\r\nYou may obtain a copy of the License in the LICENSE file, or at:\r\n\r\n  [http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}